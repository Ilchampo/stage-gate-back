generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EnumCheck {
  YES         @map("yes")
  NO          @map("no")
  REQUIRED    @map("required")
  NOT_APPLIED @map("not-applied")
}

enum EnumRole {
  ADMIN        @map("admin")
  MANAGER      @map("manager")
  COLLABORATOR @map("collaborator")
}

enum EnumStatus {
  APPROVED    @map("approved")
  COMPLETED   @map("completed")
  IN_PROGRESS @map("in-progress")
  REJECTED    @map("rejected")
  PENDING     @map("pending")
  CANCELLED   @map("cancelled")
}

model PlatformFeature {
  id        String    @id @default(uuid())
  feature   String
  enabled   Boolean   @default(false)
  updatedOn DateTime? @map("updated_on")

  @@map("tbl_platform_feature")
}

model PlatformLog {
  id          String   @id @default(uuid())
  description String
  createdOn   DateTime @default(now()) @map("created_on")

  @@map("tbl_platform_log")
}

model PlatformCode {
  id             String   @id @default(uuid())
  code           String   @unique
  createdOn      DateTime @default(now()) @map("created_on")
  validUntilDate DateTime @map("valid_until_date")

  @@map("tbl_platform_code")
}

model User {
  id        String @id @default(uuid())
  firstname String
  lastname  String
  email     String @unique
  avatar    Bytes?

  userLogin         UserLogin?
  workspaceUsers    WorkspaceUser[]
  notifications     Notification[]
  featuresDeveloped Feature[]       @relation("FeatureDeveloper")
  featuresReviewed  FeatureReview[] @relation("FeatureReviewer")

  @@map("tbl_user")
}

model UserLogin {
  id              String  @id @default(uuid())
  userId          String  @unique
  password        String
  onBoarding      Boolean @default(false) @map("on_boarding")
  verifiedEmail   Boolean @default(false) @map("verified_email")
  privacyPolicy   Boolean @default(false) @map("privacy_policy")
  defaultLanguage String  @default("en") @map("default_language")
  platformCode    String? @map("platform_code")

  user User @relation(fields: [userId], references: [id])

  @@map("tbl_user_login")
}

model Workspace {
  id          String @id @default(uuid())
  name        String
  description String
  repository  String
  logo        Bytes?
  code        String @unique

  workspaceSettings WorkspaceSetting?
  workspaceUsers    WorkspaceUser[]
  releases          Release[]
  notifications     Notification[]

  @@map("tbl_workspace")
}

model WorkspaceUser {
  id          String @id @default(uuid())
  workspaceId String @map("workspace_id")
  userId      String @map("user_id")
  role        String

  workspace Workspace @relation(fields: [workspaceId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@map("tbl_workspace_user")
}

model WorkspaceSetting {
  id               String @id @default(uuid())
  workspaceId      String @unique @map("workspace_id")
  maxManagers      Int    @default(1) @map("max_managers")
  maxCollaborators Int    @default(6) @map("max_collaborators")
  featureReviewers Int    @default(1) @map("feature_reviewers")

  workspace Workspace @relation(fields: [workspaceId], references: [id])

  @@map("tbl_workspace_setting")
}

model Release {
  id          String    @id @default(uuid())
  workspaceId String    @map("workspace_id")
  version     String    @unique
  startDate   DateTime  @map("start_date")
  endDate     DateTime? @map("end_date")
  status      String

  workspace     Workspace      @relation(fields: [workspaceId], references: [id])
  features      Feature[]
  notifications Notification[]

  @@map("tbl_release")
}

model Feature {
  id              String    @id @default(uuid())
  releaseId       String    @unique @map("release_id")
  developerId     String    @map("developer_id")
  pullRequestLink String    @map("pull_request_link")
  ticketLink      String    @map("ticket_link")
  status          String
  createdOn       DateTime  @default(now()) @map("created_on")
  updatedOn       DateTime? @map("updated_on")

  release        Release         @relation(fields: [releaseId], references: [id])
  developer      User            @relation("FeatureDeveloper", fields: [developerId], references: [id])
  featureStat    FeatureStat?
  featureReviews FeatureReview[]
  featureUpdates FeatureUpdate[]
  Notification   Notification[]

  @@map("tbl_feature")
}

model FeatureStat {
  id             String    @id @default(uuid())
  featureId      String    @unique @map("feature_id")
  startDate      DateTime  @map("start_date")
  completionDate DateTime? @map("completion_date")
  rejections     Int       @default(0)
  updates        Int       @default(0)

  feature Feature @relation(fields: [featureId], references: [id])

  @@map("tbl_feature_stat")
}

model FeatureReview {
  id             String    @id @default(uuid())
  featureId      String    @map("feature_id")
  reviewerId     String    @map("reviewer_id")
  functional     Boolean   @default(false)
  cleanCode      String    @default("not-applied") @map("clean_code")
  featureTest    String    @default("not-applied") @map("feature_test")
  securityChecks String    @default("not-applied") @map("security_checks")
  status         String    @default("pending")
  comment        String?
  reviewedOn     DateTime? @map("reviewed_on")

  feature  Feature @relation(fields: [featureId], references: [id])
  reviewer User    @relation("FeatureReviewer", fields: [reviewerId], references: [id])

  @@map("tbl_feature_review")
}

model FeatureUpdate {
  id        String   @id @default(uuid())
  featureId String   @map("feature_id")
  comment   String
  updatedOn DateTime @default(now()) @map("updated_on")

  feature Feature @relation(fields: [featureId], references: [id])

  @@map("tbl_feature_update")
}

model Notification {
  id               String   @id @default(uuid())
  userId           String   @map("user_id")
  workspaceId      String?  @map("workspace_id")
  releaseId        String?  @map("release_id")
  featureId        String?  @map("feature_id")
  notificationType String   @map("notification_type")
  readByUser       Boolean  @default(false) @map("read_by_user")
  createdOn        DateTime @default(now()) @map("created_on")

  user      User       @relation(fields: [userId], references: [id])
  workspace Workspace? @relation(fields: [workspaceId], references: [id])
  release   Release?   @relation(fields: [releaseId], references: [id])
  feature   Feature?   @relation(fields: [featureId], references: [id])

  @@map("tbl_notification")
}
