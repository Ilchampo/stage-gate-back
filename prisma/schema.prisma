generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EnumCheck {
  YES         @map("yes")
  NO          @map("no")
  REQUIRED    @map("required")
  NOT_APPLIED @map("not-applied")
}

enum EnumRole {
  ADMIN        @map("admin")
  MANAGER      @map("manager")
  COLLABORATOR @map("collaborator")
}

enum EnumStatus {
  APPROVED    @map("approved")
  COMPLETED   @map("completed")
  IN_PROGRESS @map("in-progress")
  REJECTED    @map("rejected")
  PENDING     @map("pending")
  CANCELLED   @map("cancelled")
}

model PlatformFeature {
  id        String    @id @default(uuid())
  feature   String
  enabled   Boolean   @default(false)
  updatedOn DateTime?

  @@map("tbl_platform_feature")
}

model PlatformLog {
  id          String   @id @default(uuid())
  description String
  createdOn   DateTime @default(now())

  @@map("tbl_platform_log")
}

model PlatformCode {
  id             String   @id @default(uuid())
  code           String   @unique
  createdOn      DateTime @default(now())
  validUntilDate DateTime

  @@map("tbl_platform_code")
}

model User {
  id        String @id @default(uuid())
  firstname String
  lastname  String
  email     String @unique
  avatar    Bytes?

  userLogin         UserLogin?
  workspaceUsers    WorkspaceUser[]
  notifications     Notification[]
  featuresDeveloped Feature[]       @relation("FeatureDeveloper")
  featuresReviewed  FeatureReview[] @relation("FeatureReviewer")

  @@map("tbl_user")
}

model UserLogin {
  id              String  @id @default(uuid())
  userId          String  @unique
  password        String
  onBoarding      Boolean @default(false)
  verifiedEmail   Boolean @default(false)
  privacyPolicy   Boolean @default(false)
  defaultLanguage String  @default("en")
  platformCode    String?

  user User @relation(fields: [userId], references: [id])

  @@map("tbl_user_login")
}

model Workspace {
  id          String @id @default(uuid())
  name        String
  description String
  repository  String
  logo        Bytes?
  code        String @unique

  workspaceSettings WorkspaceSetting?
  workspaceUsers    WorkspaceUser[]
  releases          Release[]
  notifications     Notification[]

  @@map("tbl_workspace")
}

model WorkspaceUser {
  id          String @id @default(uuid())
  workspaceId String
  userId      String
  role        String

  workspace Workspace @relation(fields: [workspaceId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@map("tbl_workspace_user")
}

model WorkspaceSetting {
  id               String @id @default(uuid())
  workspaceId      String @unique
  maxManagers      Int    @default(1)
  maxCollaborators Int    @default(6)
  featureReviewers Int    @default(1)

  workspace Workspace @relation(fields: [workspaceId], references: [id])

  @@map("tbl_workspace_setting")
}

model Release {
  id          String    @id @default(uuid())
  workspaceId String
  version     String    @unique
  startDate   DateTime
  endDate     DateTime?
  status      String

  workspace     Workspace      @relation(fields: [workspaceId], references: [id])
  features      Feature[]
  notifications Notification[]

  @@map("tbl_release")
}

model Feature {
  id              String    @id @default(uuid())
  releaseId       String    @unique
  developerId     String
  pullRequestLink String
  ticketLink      String
  status          String
  createdOn       DateTime  @default(now())
  updatedOn       DateTime?

  release        Release         @relation(fields: [releaseId], references: [id])
  developer      User            @relation("FeatureDeveloper", fields: [developerId], references: [id])
  featureStat    FeatureStat?
  featureReviews FeatureReview[]
  featureUpdates FeatureUpdate[]
  Notification   Notification[]

  @@map("tbl_feature")
}

model FeatureStat {
  id             String    @id @default(uuid())
  featureId      String    @unique
  startDate      DateTime
  completionDate DateTime?
  rejections     Int       @default(0)
  updates        Int       @default(0)

  feature Feature @relation(fields: [featureId], references: [id])

  @@map("tbl_feature_stat")
}

model FeatureReview {
  id             String    @id @default(uuid())
  featureId      String
  reviewerId     String
  functionl      Boolean   @default(false)
  cleanCode      String    @default("not-applied")
  featureTest    String    @default("not-applied")
  securityChecks String    @default("not-applied")
  status         String    @default("pending")
  comment        String?
  reviewedOn     DateTime?

  feature  Feature @relation(fields: [featureId], references: [id])
  reviewer User    @relation("FeatureReviewer", fields: [reviewerId], references: [id])

  @@map("tbl_feature_review")
}

model FeatureUpdate {
  id        String   @id @default(uuid())
  featureId String
  comment   String
  updatedOn DateTime @default(now())

  feature Feature @relation(fields: [featureId], references: [id])

  @@map("tbl_feature_update")
}

model Notification {
  id               String   @id @default(uuid())
  userId           String
  workspaceId      String?
  releaseId        String?
  featureId        String?
  notificationType String
  readByUser       Boolean  @default(false)
  createdOn        DateTime @default(now())

  user      User       @relation(fields: [userId], references: [id])
  workspace Workspace? @relation(fields: [workspaceId], references: [id])
  release   Release?   @relation(fields: [releaseId], references: [id])
  feature   Feature?   @relation(fields: [featureId], references: [id])

  @@map("tbl_notification")
}
